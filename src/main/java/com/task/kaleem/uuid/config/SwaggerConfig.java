package com.task.kaleem.uuid.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

/**
 * @author: Kaleem Brohi Email: kaleem.brohi27@gmail.com
 */

@Configuration
@EnableSwagger2
public class SwaggerConfig {
  /**
   * Every Docket bean is picked up by the swagger-mvc framework - allowing for multiple swagger groups i.e. same code base
   * multiple swagger resource listings.
   */
  @Bean
  public Docket customDocket() {
    return new Docket(DocumentationType.SWAGGER_2).select()
        // .apis(RequestHandlerSelectors.any())
        .apis(RequestHandlerSelectors.basePackage("com.task.kaleem.uuid")).paths(PathSelectors.regex(".*/v1/.*")).build()
        .apiInfo(apiInfo());
  }

  private ApiInfo apiInfo() {
    ApiInfo apiInfo = new ApiInfo("UUID Generator Application",
        "An application to generator UUID by creating sequences of numbers, written out as strings. "
            + " If the resulting string is under 30 characters long, it should be padded, if it’s over 40 characters long – then it should be truncated. "
            + " \n 1.     Start with a randomly generated (real) number as the base."
            + " \n 2.     If the number is even, then divide by x=2" + " \n 3.     If the number is odd, then add y=7."
            + " \n 4.     Check for longest palindromic sub-sequence." + " \n 5.     At least z=5 rules should run. "
            + " \n 6.     At least half of numbers should be generated by lines # 2 and 3.",
        "UUID Generator Application v1", "Terms of service", "kaleem.brohi27@gmail.com", "License of API",
        "https://swagger.io/docs/");
    return apiInfo;
  }
}
